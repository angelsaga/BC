#!/usr/bin/env node
"use strict";

//module dependencies
var distserver = require("../dist/server");
var debug = require("debug")("express:server");
var http = require("http");
var https = require('https');
var fs = require('fs');

var port = normalizePort(process.env.PORT || '8888');
var app = distserver.Server.bootstrap().app;
app.set('port', port);

app.engine('html', require('ejs').renderFile);
app.set('view engine', 'html');


if(process.env.SSLPORT && process.env.SSLKEY && process.env.SSLCERT){
  var privateKey_file = process.env.SSLKEY;
  var certificate_file = process.env.SSLCERT;
  var privateKey  = fs.readFileSync(privateKey_file , 'utf8');
  var certificate = fs.readFileSync(certificate_file, 'utf8');
  var credentials = {key: privateKey, cert: certificate};
  
  var httpsServer = https.createServer(credentials, app);
  httpsServer.listen(process.env.SSLPORT);
  httpsServer.on('error', onError);
  httpsServer.on('listening', onListening);
}




var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}